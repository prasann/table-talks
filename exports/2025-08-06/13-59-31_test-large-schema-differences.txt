================================================================================
TableTalk Export
================================================================================
Date: 2025-08-06
Time: 13:59:31
Query: "Test large schema differences query"
Result Size: 681 lines (auto-exported due to size)

================================================================================
RESULT
================================================================================

[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues[DIFF] **Schema Difference Analysis**

**customers.csv** vs **legacy_users.csv**
  Overall similarity: 42.86%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id (integer) â†” user_id (integer) - Different column names for same concept
  â€¢ email (varchar) â†” email_address (varchar) - Different column names  
  â€¢ name (varchar) â†” full_name (varchar) - Different column names
  â€¢ address (varchar) â†” street_address (varchar) - Different specificity
  â€¢ phone (varchar) â†” phone_number (varchar) - Different column names
  â€¢ registration_date (date) â†” signup_date (date) - Different column names

ðŸŸ¡ **Missing Columns:**
  â€¢ customers.csv has: customer_id, email, name, address, phone, registration_date
  â€¢ legacy_users.csv has: user_id, email_address, full_name, street_address, phone_number, signup_date

ðŸ”µ **Additional Analysis:**
  â€¢ Both schemas represent user/customer data
  â€¢ Legacy schema uses more descriptive column names
  â€¢ Modern schema uses shorter, more concise names
  â€¢ Data types are compatible across both schemas
  â€¢ No structural incompatibilities detected

**Recommendation:** Create mapping rules for data migration between schemas.

**customers.csv** vs **orders.csv**
  Overall similarity: 16.67%

ðŸ“Š **Detailed Differences:**

ðŸ”´ **Column Type Mismatches:**
  â€¢ customer_id appears in both but different contexts
  â€¢ No other matching columns detected

ðŸŸ¡ **Schema Structure Differences:**
  â€¢ customers.csv: User profile data (6 columns)
  â€¢ orders.csv: Transaction data (6 columns)
  â€¢ Different business domains entirely

ðŸ”µ **Relationship Analysis:**
  â€¢ customer_id acts as foreign key relationship
  â€¢ Schemas complement each other in business model
  â€¢ No direct schema compatibility issues

================================================================================
END OF RESULT
================================================================================